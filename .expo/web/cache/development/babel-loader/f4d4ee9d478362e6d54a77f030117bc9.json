{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState, useEffect } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport React from \"react\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar CWeatherURL = \"http://api.weatherapi.com/v1/current.json?key=a9e96160908f492d966202548220703 &q=Buenos Aires&aqi=no\";\nvar FWeatherURL = \"http://api.weatherapi.com/v1/forecast.json?key=a9e96160908f492d966202548220703 &q=Buenos Aires&days=3&aqi=no&alerts=no\";\n\nvar changeCLocation = function changeCLocation() {\n  return CWeatherURL.replace(\"Buenos Aires\", \"Lanus\");\n};\n\nvar App = function App() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      location = _useState2[0],\n      setLocation = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      time = _useState4[0],\n      setTime = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      condition = _useState6[0],\n      setCondition = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      forecast = _useState8[0],\n      setForecast = _useState8[1];\n\n  changeCLocation();\n  console.log(\"CWeatherURL\");\n  useEffect(function () {\n    fetch(CWeatherURL).then(function (response) {\n      return response.json();\n    }).then(function (json) {\n      setLocation(json.location);\n      setTime(json.current);\n      setCondition(json.current.condition);\n    }).catch(function (error) {\n      return alert(error);\n    });\n    fetch(FWeatherURL).then(function (response) {\n      return response.json();\n    }).then(function (json) {\n      setForecast(json.forecast.forecastday);\n    }).catch(function (error) {\n      return alert(error);\n    });\n  }, []);\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.text,\n      children: location.name\n    }), _jsx(Text, {\n      style: styles.text,\n      children: condition.text\n    }), _jsxs(Text, {\n      style: styles.text,\n      children: [time.temp_c, \"\\xB0\"]\n    })]\n  });\n};\n\nexport default App;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  text: {\n    color: \"blue\",\n    fontSize: 20,\n    fontWeight: \"bold\"\n  }\n});","map":{"version":3,"sources":["D:/Documentos/LUCAS/Documentos/React-Native/WeatherApp/Weather/App.js"],"names":["useState","useEffect","React","CWeatherURL","FWeatherURL","changeCLocation","replace","App","location","setLocation","time","setTime","condition","setCondition","forecast","setForecast","console","log","fetch","then","response","json","current","catch","error","alert","forecastday","styles","container","text","name","temp_c","StyleSheet","create","flex","justifyContent","alignItems","color","fontSize","fontWeight"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;;;;AAEA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,IAAMC,WAAW,GACf,sGADF;AAGA,IAAMC,WAAW,GACf,wHADF;;AAKA,IAAIC,eAAe,GAAG,SAAlBA,eAAkB;AAAA,SAAMF,WAAW,CAACG,OAAZ,CAAoB,cAApB,EAAoC,OAApC,CAAN;AAAA,CAAtB;;AAGA,IAAMC,GAAG,GAAG,SAANA,GAAM,GAAM;AAChB,kBAAgCP,QAAQ,CAAC,EAAD,CAAxC;AAAA;AAAA,MAAOQ,QAAP;AAAA,MAAiBC,WAAjB;;AACA,mBAAwBT,QAAQ,CAAC,EAAD,CAAhC;AAAA;AAAA,MAAOU,IAAP;AAAA,MAAaC,OAAb;;AACA,mBAAkCX,QAAQ,CAAC,EAAD,CAA1C;AAAA;AAAA,MAAOY,SAAP;AAAA,MAAkBC,YAAlB;;AACA,mBAAgCb,QAAQ,CAAC,EAAD,CAAxC;AAAA;AAAA,MAAOc,QAAP;AAAA,MAAiBC,WAAjB;;AAEAV,EAAAA,eAAe;AAEfW,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AAEAhB,EAAAA,SAAS,CAAC,YAAM;AACdiB,IAAAA,KAAK,CAACf,WAAD,CAAL,CACGgB,IADH,CACQ,UAACC,QAAD;AAAA,aAAcA,QAAQ,CAACC,IAAT,EAAd;AAAA,KADR,EAEGF,IAFH,CAEQ,UAACE,IAAD,EAAU;AACdZ,MAAAA,WAAW,CAACY,IAAI,CAACb,QAAN,CAAX;AACAG,MAAAA,OAAO,CAACU,IAAI,CAACC,OAAN,CAAP;AACAT,MAAAA,YAAY,CAACQ,IAAI,CAACC,OAAL,CAAaV,SAAd,CAAZ;AACD,KANH,EAOGW,KAPH,CAOS,UAACC,KAAD;AAAA,aAAWC,KAAK,CAACD,KAAD,CAAhB;AAAA,KAPT;AASAN,IAAAA,KAAK,CAACd,WAAD,CAAL,CACGe,IADH,CACQ,UAACC,QAAD;AAAA,aAAcA,QAAQ,CAACC,IAAT,EAAd;AAAA,KADR,EAEGF,IAFH,CAEQ,UAACE,IAAD,EAAU;AACdN,MAAAA,WAAW,CAACM,IAAI,CAACP,QAAL,CAAcY,WAAf,CAAX;AACD,KAJH,EAKGH,KALH,CAKS,UAACC,KAAD;AAAA,aAAWC,KAAK,CAACD,KAAD,CAAhB;AAAA,KALT;AAMD,GAhBQ,EAgBN,EAhBM,CAAT;AAkBA,SACE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEG,MAAM,CAACC,SAApB;AAAA,eACE,KAAC,IAAD;AAAM,MAAA,KAAK,EAAED,MAAM,CAACE,IAApB;AAAA,gBAA2BrB,QAAQ,CAACsB;AAApC,MADF,EAEE,KAAC,IAAD;AAAM,MAAA,KAAK,EAAEH,MAAM,CAACE,IAApB;AAAA,gBAA2BjB,SAAS,CAACiB;AAArC,MAFF,EAGE,MAAC,IAAD;AAAM,MAAA,KAAK,EAAEF,MAAM,CAACE,IAApB;AAAA,iBAA2BnB,IAAI,CAACqB,MAAhC;AAAA,MAHF;AAAA,IADF;AAQD,CApCD;;AAsCA,eAAexB,GAAf;AAEA,IAAMoB,MAAM,GAAGK,UAAU,CAACC,MAAX,CAAkB;AAC/BL,EAAAA,SAAS,EAAE;AACTM,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,cAAc,EAAE,QAFP;AAGTC,IAAAA,UAAU,EAAE;AAHH,GADoB;AAM/BP,EAAAA,IAAI,EAAE;AACJQ,IAAAA,KAAK,EAAE,MADH;AAEJC,IAAAA,QAAQ,EAAE,EAFN;AAGJC,IAAAA,UAAU,EAAE;AAHR;AANyB,CAAlB,CAAf","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { StyleSheet, Text, View, Image } from \"react-native\";\nimport React from \"react\";\n\nconst CWeatherURL =\n  \"http://api.weatherapi.com/v1/current.json?key=a9e96160908f492d966202548220703 &q=Buenos Aires&aqi=no\";\n\nconst FWeatherURL =\n  \"http://api.weatherapi.com/v1/forecast.json?key=a9e96160908f492d966202548220703 &q=Buenos Aires&days=3&aqi=no&alerts=no\";\n\n// let changeCLocation = CWeatherURL.replace(\"Buenos Aires\", () => {});\n\nvar changeCLocation = () => CWeatherURL.replace(\"Buenos Aires\", \"Lanus\");\n\n\nconst App = () => {\n  const [location, setLocation] = useState([]);\n  const [time, setTime] = useState([]);\n  const [condition, setCondition] = useState([]);\n  const [forecast, setForecast] = useState([]);\n\n  changeCLocation();\n\n  console.log(\"CWeatherURL\");\n\n  useEffect(() => {\n    fetch(CWeatherURL)\n      .then((response) => response.json())\n      .then((json) => {\n        setLocation(json.location);\n        setTime(json.current);\n        setCondition(json.current.condition);\n      })\n      .catch((error) => alert(error));\n\n    fetch(FWeatherURL)\n      .then((response) => response.json())\n      .then((json) => {\n        setForecast(json.forecast.forecastday);\n      })\n      .catch((error) => alert(error));\n  }, []);\n  \n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>{location.name}</Text>\n      <Text style={styles.text}>{condition.text}</Text>\n      <Text style={styles.text}>{time.temp_c}Â°</Text>\n      {/* <Text style={styles.text}>{forecast[1].day.maxtemp_c}</Text> */}\n    </View>\n  );\n};\n\nexport default App;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  text: {\n    color: \"blue\",\n    fontSize: 20,\n    fontWeight: \"bold\",\n  },\n});\n"]},"metadata":{},"sourceType":"module"}